/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.mobilebasicsanity.wmstudio;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.math.BigInteger;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * Countries generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`COUNTRIES`")
public class Countries implements Serializable {

    private String countryId;
    private String countryName;
    private BigInteger regionId;
    private Regions regions;

    @Id
    @Column(name = "`COUNTRY_ID`", nullable = false, length = 2)
    public String getCountryId() {
        return this.countryId;
    }

    public void setCountryId(String countryId) {
        this.countryId = countryId;
    }

    @Column(name = "`COUNTRY_NAME`", nullable = true, length = 40)
    public String getCountryName() {
        return this.countryName;
    }

    public void setCountryName(String countryName) {
        this.countryName = countryName;
    }

    @Column(name = "`REGION_ID`", nullable = true, scale = 0, precision = 38)
    public BigInteger getRegionId() {
        return this.regionId;
    }

    public void setRegionId(BigInteger regionId) {
        this.regionId = regionId;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`REGION_ID`", referencedColumnName = "`REGION_ID`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`COUNTR_REG_FK`"))
    @Fetch(FetchMode.JOIN)
    public Regions getRegions() {
        return this.regions;
    }

    public void setRegions(Regions regions) {
        if(regions != null) {
            this.regionId = regions.getRegionId();
        }

        this.regions = regions;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Countries)) return false;
        final Countries countries = (Countries) o;
        return Objects.equals(getCountryId(), countries.getCountryId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getCountryId());
    }
}